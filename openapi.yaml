openapi: 3.0.0

servers:
  - url: https://mhmd.madgik.di.uoa.gr/api
    description: Production server

info:
  title: Athena MHMD API
  description: >-
    An API for multi-level privacy preservation techniques.
  version: 1.0.0
  x-logo:
    url: 'https://mhmd.madgik.di.uoa.gr/mhmd_logo_black.svg'
    altText: MHMD
  license:
    name: MIT
    url: 'https://github.com/Athena-MHMD/api-scheme/blob/master/LICENSE'

tags:
  - name: Amnesia
    description: >-
      Amnesia is a data anonymization tool, that allows to remove identifying
      information from data. mnesia not only removes direct identifiers like
      names, SSNs etc but also transforms secondary identifiers like birth date
      and zip code so that individuals cannot be identified in the data. Amnesia
      supports k-anonymity and k^m-anonymity
  - name: SMPC
    description: 'Secure multi party computation platform'
  - name: Queue & Results
    description: 'Queue & Results API'
  - name: Federated Learning
    description: 'Federated learning API'
paths:
  /queue/{id}:
    get:
      tags:
        - Queue & Results
      summary: "Poll for an ongoing computation status."
      description: "Check the status of an ongoing computation. Returns its status or the location of the computation's results when the computation is completed."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The request id.
      responses:
        '200':
          description: ΟΚ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResponse"

        '303':
          description: Computation completed. Redirect to the resource where the computation's results are provided.
          headers:
            Location:
              schema:
                type: string
              description: "Location for computartion results retrieval"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputationCompleted"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

  /results/{id}:
    get:
      tags:
        - Queue & Results
      summary: "Computation results retrieval"
      description: "Retrieve the results of a completed computation."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The request id.
      responses:
        '200':
          description: ΟΚ
          content:
            application/json:
              schema:
                oneOf:
                 - $ref: "#/components/schemas/ComputationResults1DCategorical"
                 - $ref: "#/components/schemas/ComputationResults1DNumerical"
                 - $ref: "#/components/schemas/ComputationResults2DCategorical"
                 - $ref: "#/components/schemas/ComputationResults2DNumerical"
                 - $ref: "#/components/schemas/ComputationResults2DMixed"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /smpc/histogram/:
    post:
      tags:
        - SMPC
      summary: Initiates a secure computation over a numerical dataset.
      description: "Through the request's body, one can specify all the desired properties of the histograms to be computed. These include the names of the attributes, the ids of the dataproviders to be cosidered, a set of filters that needs to be satisfied by data instances to be taken into account and finally, for numerical attributes, the number of bins (cells) to be used. You can provide up to two attributes as up to 2 dimensions histograms are suported by the smpc computation engine."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Histogram"
      responses:
        '202':
          description: Request for smpc computation accepted.
          headers:
            Location:
              schema:
                type: string
              description: "Location for status polling."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SMPCComputationAccepted"
        '303':
          description: Computation found in cache. Redirect to the resource where the computation's results are provided.
          headers:
            Location:
              schema:
                type: string
              description: "Location for computartion results retrieval."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SMPCComputationCompleted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Error'

  /smpc/queue/{id}:
    get:
      tags:
        - SMPC
      summary: "Poll for an ongoing computation status."
      description: "Check the status of an ongoing computation. Returns its status or the location of the computation's results when the computation is completed."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The request id.
      responses:
        '200':
          description: ΟΚ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResponse"

        '303':
          description: Computation completed. Redirect to the resource where the computation's results are provided.
          headers:
            Location:
              schema:
                type: string
              description: "Location for computartion results retrieval"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SMPCComputationCompleted"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

  /smpc/results/{id}:
    get:
      tags:
        - SMPC
      summary: "Computation results retrieval"
      description: "Retrieve the results of a completed computation."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The request id.
      responses:
        '200':
          description: ΟΚ
          content:
            application/json:
              schema:
                oneOf:
                 - $ref: "#/components/schemas/ComputationResults1DCategorical"
                 - $ref: "#/components/schemas/ComputationResults1DNumerical"
                 - $ref: "#/components/schemas/ComputationResults2DCategorical"
                 - $ref: "#/components/schemas/ComputationResults2DNumerical"
                 - $ref: "#/components/schemas/ComputationResults2DMixed"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

  /amnesia/session:
    get:
      tags:
        - Amnesia
      summary: Get a session id.
      security: []
      responses:
        '200':
          description: >
            The session ID is returned in a cookie named `JSESSIONID`. You need
            to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
  /amnesia/dataset:
    post:
      tags:
        - Amnesia
      summary: Upload a dataset.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        description: The metadata and the file of the dataset
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '200':
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'

  /amnesia/hierarchy:
    post:
      tags:
        - Amnesia
      summary: Upload a hierarchy.
      security:
        - cookieAuth: []
      requestBody:
        description: The hierarchy file
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'
  /amnesia/anonymize:
    post:
      tags:
        - Amnesia
      summary: Executes k or km anonimity.
      security:
        - cookieAuth: []
      requestBody:
        description: The parameters of the algorithm
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Algorithm'
      responses:
        '200':
          description: A file containing the best anonymized solution based on information loss
          content:
            application/csv:
              schema:
                type: string
                format: binary

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'
  /fl/train/context:
    post:
      tags:
        - Federated Learning
      summary: "Initiate the deployment of a training model."
      description: "A researcher can upload a docker image which contains the model evalutation and the gradient computation step."
      requestBody:
        description: The docker image along with additional fields required for the training.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingModel'
      responses:
        '202':
          description: Request for federated learning accepted.
          headers:
            Location:
              schema:
                type: string
              description: "Location to initiate a computation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputationAccepted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Error'

  /fl/train/context/{id}/compute:
    post:
      tags:
        - Federated Learning
      summary: "Initiate an iteration of training."
      description: ""
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The request id.
      requestBody:
        description: The file containing the new parameters for the training and the researcher's callback url.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingCompute'
      responses:
        '200':
          description: Request for federated learning accepted.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Error'

  /fl/train/context/{id}:
    delete:
      tags:
        - Federated Learning
      summary: "Delete a training context"
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The request id.
      responses:
        '200':
          description: Training deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
  responses:
    Unauthorized:
        description: Authorization information is missing or invalid.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error:
      description: An error has occured
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Cache:
      description: Computation found in cache. Redirect to the resource where the computation's results are provided.
      headers:
        Location:
          schema:
            type: string
          description: "Location for computartion results retrieval."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ComputationCompleted"
  schemas:
    File:
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: The file
    TrainingModel:
      required:
        - docker_image
        - parameter_count
        - max_iterations
        - data_split
      example: {
        docker_image: "hello-world",
        parameter_count: 10000,
        dataProviders: [0, 1],
        data_split: [0.3, 0.2],
        max_iterations: 100
      }
      properties:
        docker_image:
          type: string
          description: The docker image url. Can be either url pointing to a tar file or a docker repository image url.
        parameter_count:
          type: integer
          description: The total number of model's parameters.
        dataProviders:
          description: "A list of the data providers (integers) that will participate in the training. If this key is left empty or not specified, all available data providers will be used."
          type: "array"
          items:
            type: "string"
        data_split:
          description: "An array of size two. The first element of the array denotes the validation percentage and the second element denotes the test percentage"
          type: "array"
          items:
            type: "number"
        max_iterations:
          type: integer
          description: The max number of iterations.

    Algorithm:
        required:
          - k
          - m
          - algo
          - relations
        properties:
          k:
            type: integer
            description: the k variable for k-anonymity
          m:
            type: integer
            description: the m variable for km-anonymity
          algo:
            type: string
            description: 'the specific algorithm, ''k-anonymity'' or ''km-anonymity'''
          relations:
            type: array
            description: An array with the name of each hierarchy. (Only the quasi-identifiers. The others identifiers are empty)
            items:
              type: string

    TrainingCompute:
      required:
          - batch_size
          - parameters_file_url
          - result_callback_url
      properties:
        batch_size:
          type: integer
          description: The size of the batch.
        parameters_file_url:
          type: "string"
          description: The url from where the parameters will be downloaded. For example an h5p file.
        result_callback_url:
          type: string
          description: The callback URL where the results of the iteration will be posted.
        validation:
          type: string
          description: "Can be test or validation"
          "enum": ["test", "validation"]

    Histogram:
      required:
        - attributes
      example: {
        attributes: [
          {
            name: "Patient Age",
            cells: "5"
          },
          {
            name: "Height (cm)",
            cells: "3"
          }
        ],
        algorithm: "2d_numerical_histogram",
        dataProviders: [0, 2],
        filters: [
          {
            attribute: "Patient Age",
            operator: ">",
            value: "45"
          },
          {
            attribute: "Weight (kg)",
            operator: "<",
            value: "90"
          }
        ]
      }
      properties:
        attributes:
          description: "A list of objects, corresponding to the attributes on which this histogram will be built."
          type: "array"
          items:
            type: "object"
            "required": [ "name", "cells"]
            properties:
              name:
                type: "string"
                description: "The name of the attribute."
              cells:
                type: "integer"
                description: "The number of histogram cells, in case of numerical attribute, to be created for this attribute. For categorical attributes the cell property is not taken into account."
        algorithm:
          type: "string"
          description: "The histogram algorithm."
          enum: ["2d_mixed_histogram", "1d_categorical_histogram", "2d_numerical_histogram", "2d_categorical_histogram"]
        dataProviders:
          description: "A list of the data providers (integers) from which the histogram will be computed. If this key is left empty or not specified, all available data providers will be used."
          type: "array"
          items:
            type: "string"
        filters:
          description: "An array containing a list of filters/conditions that should be met for each data tuple considered in the secure histogram computation. If this field is left blank or not specified, all data tuples will be used for the computation."
          type: "array"
          items:
            type: "object"
            "required": [ "attribute", "operator", "value"]
            description: "The list of conditions that should be met by each data tuple in the computation."
            properties:
              attribute:
                type: "string"
                description: "The name of the attribute"
              operator:
                type: "string"
                description: "The condition’s operator. One of {>, <, =}"
                "enum": [
                  ">",
                  "<",
                  "="
                ]
              value:
                type: "string"
                description: "The attribute’s value"
    Dataset:
      required:
        - file
        - del
        - datatype
        - vartypes
        - checkColumns
      properties:
        file:
          type: string
          format: binary
          description: The file
        del:
          type: string
          description: The split delimiter
        datatype:
          type: string
          description: 'The data type of the dataset: ''tabular'' or ''set'''
        vartypes:
          type: array
          description: >-
            An array with the variable types of the columns: ['int', 'double',
            'string', 'date']
          items:
            type: string
        checkColumns:
          type: array
          description: >-
            A boolean array indicating which column should participate in the
            anonymization: ['true', 'false']
          items:
            type: boolean
    Error:
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message

    StatusResponse:
      required:
        - status
      description: "The status of computation"
      type: object
      properties:
        status:
          type: string
          enum:
            - "pending"
            - "processing"
            - "failed"
            - "completed"

    SMPCComputationAccepted:
      required:
        - location
      description: "Indication that the secure histogram computation has been accepted. The location provided should be used for status polling."
      type: object
      properties:
        location:
          type: string
      example: {"location" : "/smpc/queue/b0f236f4-920b-4c11-b152-f8ae8812c42e"}

    ComputationAccepted:
      required:
        - id
        - location
      description: "Indication that the computation has been accepted. The location provided should be used for status polling."
      type: object
      properties:
        id:
          type: string
        location:
          type: string
      example: {"id": "b0f236f4-920b-4c11-b152-f8ae8812c42e", "location" : "/queue/b0f236f4-920b-4c11-b152-f8ae8812c42e"}

    SMPCComputationCompleted:
      required:
        - location
      description: "Indication that a secure computation has been completed. The location provided should be used results retrieval."
      type: object
      properties:
        location:
          type: string
      example: {"location" : "/smpc/results/b0f236f4-920b-4c11-b152-f8ae8812c42e"}

    ComputationCompleted:
      required:
        - location
      description: "Indication that a computation has been completed. The location provided should be used results retrieval."
      type: object
      properties:
        location:
          type: string
      example: {"id": "b0f236f4-920b-4c11-b152-f8ae8812c42e", "location" : "/results/b0f236f4-920b-4c11-b152-f8ae8812c42e"}

    ComputaitonResults:
      properties:
        attributes:
          type: "array"
          items:
            type: "object"
            properties:
              name:
                type: "string"
              cells:
                type: "integer"
        dataProviders:
          type: "array"
          items:
            type: "integer"
        filters:
          type: "array"
          items:
            type: "object"
            properties:
              attribute:
                type: "string"
              operator:
                type: "string"
                description: "The condition’s operator. One of {>, <, =}"
              value:
                type: "string"
        algorithm:
          type: "string"
          enum: ["2d_mixed_histogram", "1d_categorical_histogram", "2d_numerical_histogram", "2d_categorical_histogram"]
        id:
          type: "string"
        timestamps:
          type: "object"
          properties:
            accepted:
              type: "integer"
            process:
              type: "integer"
            done:
              type: "integer"
        status:
          type: "string"
          enum: ["pending", "processing", "completed", "failed"]


    ComputationResults1DCategorical:
      properties:
        results:
          type: "object"
          properties:
            x:
              type: "array"
              items:
                type: "string"
            y:
              type: "array"
              items:
                type: "integer"
      allOf:
        - $ref: '#/components/schemas/ComputaitonResults'

    ComputationResults1DNumerical:
      properties:
        results:
          type: "object"
          properties:
            min:
              type: "integer"
            max:
              type: "integer"
            cells:
              type: "integer"
            y:
              type: "array"
              items:
                type: "integer"
      allOf:
        - $ref: '#/components/schemas/ComputaitonResults'
        - type: "object"

    ComputationResults2DCategorical:
      properties:
        results:
          type: "object"
          properties:
            z:
              type: "array"
              items:
                type: "array"
                items:
                  type: "integer"
            labels:
              type: "object"
              properties:
                x:
                  type: "array"
                  items:
                    type: "string"
                y:
                  type: "array"
                  items:
                    type: "string"

      allOf:
        - $ref: '#/components/schemas/ComputaitonResults'

    ComputationResults2DNumerical:
      properties:
        results:
          type: "object"
          properties:
            cellsX:
              type: "integer"
            cellsY:
              type: "integer"
            min:
              type: "array"
              items:
                type: "integer"
            max:
              type: "array"
              items:
                type: "integer"
            z:
              type: "array"
              items:
                type: "array"
                items:
                  type: "integer"
      allOf:
        - $ref: '#/components/schemas/ComputaitonResults'

    ComputationResults2DMixed:
      properties:
        results:
          type: "object"
          properties:
            min:
              type: "integer"
            max:
              type: "integer"
            cells:
              type: "integer"
            y:
              type: "array"
              items:
                type: "string"
            z:
              type: "array"
              items:
                type: "array"
                items:
                  type: "integer"
      allOf:
        - $ref: '#/components/schemas/ComputaitonResults'
